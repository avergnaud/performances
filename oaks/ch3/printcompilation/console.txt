/home/ubuntu/dev/git/avergnaud/performances>javac ch3/printcompilation/Cas1.java 

/home/ubuntu/dev/git/avergnaud/performances>java -XX:+PrintCompilation ch3.printcompilation.Cas1 50 50
     73    1       3       java.lang.String::hashCode (55 bytes)
     74    2       3       java.lang.String::equals (81 bytes)
     76    3       3       java.lang.String::charAt (29 bytes)
     77    4       3       java.lang.String::length (6 bytes)
     77    5       3       java.lang.Object::<init> (1 bytes)
     80    6     n 0       java.lang.System::arraycopy (native)   (static)
     80    7       3       java.lang.String::indexOf (70 bytes)
     81    8       3       java.lang.Math::min (11 bytes)
     81   10       1       java.lang.Object::<init> (1 bytes)
     81    5       3       java.lang.Object::<init> (1 bytes)   made not entrant
     81    9       1       java.lang.ref.Reference::get (5 bytes)
     81   11       3       java.lang.AbstractStringBuilder::ensureCapacityInternal (16 bytes)
     81   12       1       java.lang.ThreadLocal::access$400 (5 bytes)
     83   13       3       java.lang.Math::max (11 bytes)
     84   14       3       java.util.jar.Attributes$Name::isValid (32 bytes)
     84   15       3       java.util.jar.Attributes$Name::isAlpha (30 bytes)
     85   16       3       sun.nio.cs.UTF_8$Decoder::decode (779 bytes)
     86   19       4       java.lang.String::charAt (29 bytes)
     87    3       3       java.lang.String::charAt (29 bytes)   made not entrant
     90   20       3       sun.nio.cs.UTF_8$Encoder::encode (359 bytes)
     90   22       3       java.lang.AbstractStringBuilder::append (50 bytes)
     91   26       3       java.lang.String::getChars (62 bytes)
     91   17       3       sun.misc.ASCIICaseInsensitiveComparator::toLower (16 bytes)
     91   18       3       sun.misc.ASCIICaseInsensitiveComparator::isUpper (18 bytes)
     91   23  s    1       java.util.Vector::size (5 bytes)
     91   21       1       java.net.URL::getProtocol (5 bytes)
     91   24       1       java.net.URL::getAuthority (5 bytes)
     92   25       1       java.net.URL::getPath (5 bytes)
     92   27       3       java.util.Arrays::copyOfRange (63 bytes)

/home/ubuntu/dev/git/avergnaud/performances>java -XX:+PrintCompilation ch3.printcompilation.Cas1 500 500
     54    1       3       java.lang.String::hashCode (55 bytes)
     55    2       3       java.lang.String::equals (81 bytes)
     58    3       3       java.lang.String::charAt (29 bytes)
     59    4       3       java.lang.String::length (6 bytes)
     59    5       3       java.lang.Object::<init> (1 bytes)
     62    6     n 0       java.lang.System::arraycopy (native)   (static)
     62    7       3       java.lang.String::indexOf (70 bytes)
     62    8       3       java.lang.Math::min (11 bytes)
     62    9       1       java.lang.ref.Reference::get (5 bytes)
     63   10       1       java.lang.Object::<init> (1 bytes)
     63    5       3       java.lang.Object::<init> (1 bytes)   made not entrant
     63   11       3       java.lang.AbstractStringBuilder::ensureCapacityInternal (16 bytes)
     63   12       1       java.lang.ThreadLocal::access$400 (5 bytes)
     65   13       3       java.lang.Math::max (11 bytes)
     66   14       3       java.util.jar.Attributes$Name::isValid (32 bytes)
     66   15       3       java.util.jar.Attributes$Name::isAlpha (30 bytes)
     67   16       3       sun.nio.cs.UTF_8$Decoder::decode (779 bytes)
     68   19       4       java.lang.String::charAt (29 bytes)
     70    3       3       java.lang.String::charAt (29 bytes)   made not entrant
     71   20       3       sun.nio.cs.UTF_8$Encoder::encode (359 bytes)
     72   22       3       java.lang.AbstractStringBuilder::append (50 bytes)
     72   26       3       java.lang.String::getChars (62 bytes)
     73   17       3       sun.misc.ASCIICaseInsensitiveComparator::toLower (16 bytes)
     73   18       3       sun.misc.ASCIICaseInsensitiveComparator::isUpper (18 bytes)
     73   23  s    1       java.util.Vector::size (5 bytes)
     73   21       1       java.net.URL::getProtocol (5 bytes)
     73   25       1       java.net.URL::getPath (5 bytes)
     73   24       1       java.net.URL::getAuthority (5 bytes)
     73   27       3       java.io.UnixFileSystem::normalize (75 bytes)
     74   28       3       java.util.Arrays::copyOfRange (63 bytes)
     75   29       3       ch3.printcompilation.Cas1::someMethod (21 bytes)
     75   30 %     4       ch3.printcompilation.Cas1::someMethod @ 4 (21 bytes)
/home/ubuntu/dev/git/avergnaud/performances

     75   29       3       ch3.printcompilation.Cas1::someMethod (21 bytes)
     75   30 %     4       ch3.printcompilation.Cas1::someMethod @ 4 (21 bytes)

% flag means the compilation is on-stack replacement (OSR)	

javac compiles from .java to .class (bytecode).
java runs the bytecode.
The java program is able to compile the bytecode into platform binary as the code executes. This compilation occurs as the program executes: JIT.
If the code is a frequently called method, and/or a loop that runs many iterations, then compiling it is worthwhile.
"Compilation is based on two counters in the JVM:
- number of times the method has been called
- number of times any loop in the method have branched back
[...]
What if the method has a really long loop - or one that never exists and provides all the logic of the program? [...]
This kind of compilation is called on-stack replacement (OSR), because even if the loop is compiled, that isn't sufficient:
the JVM has to have the ability to start executing the compiled version of the loop while the loop is still running."









